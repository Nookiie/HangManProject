@page "/game"
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.IO;
@using HangmanLogic.Logic;
@using HM.Data.Entities.GameItems;
@using HM.Data.Entities.Difficulty;
@using HM.Data.Entities.GameCondition;
@using HM.Data.Abstraction;
@using System.Text.RegularExpressions;

<h1>Welcome to the HangmanGame</h1>

@{

}
<button class="btn btn-primary" @onclick="">Start Game</button>
<button class="btn btn-primary" @onclick="">Guess Word</button>

<input name="MainCharInput" type="text" />

@code {
    int wordCount = 0;

    public static void StartGame(string category, GameDifficulty GameDifficulty)
    {
        List<Word> words = new List<Word>
    {
                new Word("apple"),
                new Word("stuff"),
                new Word("elephant"),
                new Word("archipelago"),
                new Word("imagination")
            };

        IGameData gameData = new GameData(category, words, GameDifficulty);
        gameData.CheckWordsForErrors();

        Word chosenWord = gameData.GetRandomWord();
        Word printWord = new Word();
        printWord.Name = chosenWord.Name;

        printWord.Name = new Regex("\\S").Replace(chosenWord.Name, "_ ");
        while (true)
        {
            // GameLogic.PrintGameData(printWord, gameData);

            char input = Console.ReadKey().KeyChar;

            if (input == '!')
            {
                if (gameData.GetJokerCount() > 0)
                    input = GameLogic.GetJoker(gameData, chosenWord, printWord);
                else
                    continue;
            }

            if (gameData.GuessCharacterInWord(input, chosenWord) && !printWord.Name.Contains(input))
            {
                if (gameData.Win(chosenWord))
                {
                    GameLogic.GameOver(chosenWord, gameData, GameCondition.Won);
                    break;
                }
                else
                {
                    for (int i = 0; i < chosenWord.Name.Length; i++)
                    {
                        if (chosenWord.Name[i] == input)
                        {
                            StringBuilder sb = new StringBuilder(printWord.Name);
                            sb[i] = input;
                            printWord.Name = sb.ToString();
                        }
                    }
                    continue;
                }
            }
            else if (!gameData.GuessCharacterInWord(input, chosenWord))
            {
                if (gameData.Fail())
                {
                    GameLogic.GameOver(chosenWord, gameData, GameCondition.Lost);
                    break;
                }
                else
                {
                    continue;
                }
            }

        }
    }
}

