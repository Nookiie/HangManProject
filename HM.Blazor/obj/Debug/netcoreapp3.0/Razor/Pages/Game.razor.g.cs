#pragma checksum "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4a545d2e530f6eff34aebe383ce1061bb4d4c5c2"
// <auto-generated/>
#pragma warning disable 1591
namespace HM.Blazor.Pages
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Layouts;

#line default
#line hidden
#line 4 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 5 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using HM.Blazor;

#line default
#line hidden
#line 7 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using HM.Blazor.Shared;

#line default
#line hidden
#line 2 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System;

#line default
#line hidden
#line 3 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.Linq;

#line default
#line hidden
#line 5 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.Text;

#line default
#line hidden
#line 6 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.IO;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/game")]
    public class Game : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.AddMarkupContent(0, "<h3>Welcome to the HangmanGame</h3>");
        }
        #pragma warning restore 1998
#line 10 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
       
    public static List<string> LoadListOfWords()
    {
        StreamReader sr = null;
        try
        {
            sr = new StreamReader("ListOfWords.txt");
        }
        catch (Exception)
        {
            Console.WriteLine("Cannot load text file with list of words!");
        }

        List<string> ListOfWords = new List<string>();
        string word;
        while ((word = sr.ReadLine()) != null)
        {
            ListOfWords.Add(word);
        }

        return ListOfWords;
    }
    public static void StartGame(string[] args)
    {

        Random rnd = new Random();
        List<string> listOfWords = LoadListOfWords();
        string wordToGuess = listOfWords[rnd.Next(0, listOfWords.Count - 1)];
        string wordToGuessUpper = wordToGuess.ToUpper();

        StringBuilder wordToGuessDashed = new StringBuilder();

        for (int i = 0; i < wordToGuess.Length; i++)
        {
            wordToGuessDashed.Append('-');
        }

        string usedLetters = String.Empty;
        bool won = false;
        int numberOfFails = 0;
        string input = String.Empty;
        char guess;

        while (numberOfFails < 10 && !won)
        {
            Console.Write("Enter a letter: ");
            input = Console.ReadLine().ToUpper();
            guess = input[0];

            if (!Char.IsLetter(guess))
            {
                Console.WriteLine($"{guess} is not a letter!");
                continue;
            }

            if (usedLetters.Contains(guess))
            {
                Console.WriteLine($"You've already used {guess}!");
                continue;
            }

            if (wordToGuessUpper.Contains(guess))
            {
                for (int j = 0; j < wordToGuessUpper.Length; j++)
                {
                    if (wordToGuessUpper[j] == guess)
                    {
                        wordToGuessDashed[j] = guess;
                    }
                }
                Console.WriteLine(wordToGuessDashed.ToString());
            }
            else
            {
                numberOfFails++;
                usedLetters += guess;
                Console.WriteLine(wordToGuessDashed.ToString());
                if (numberOfFails < 10)
                {
                    Console.WriteLine($"Used letters: {usedLetters}");
                }
            }

            if (wordToGuessDashed.ToString().Equals(wordToGuessUpper))
            {
                won = true;
            }
        }

        if (won)
        {
            Console.WriteLine("You won!");
        }
        else
        {
            Console.WriteLine($"You lost! Correct answer is: {wordToGuessUpper}");
        }
        Console.Write("Hit enter to exit...");
        Console.ReadLine();
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
