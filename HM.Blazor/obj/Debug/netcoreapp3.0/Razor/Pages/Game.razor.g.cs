#pragma checksum "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f04fc5b0e511210c01912dbf5226e3fbea150a55"
// <auto-generated/>
#pragma warning disable 1591
namespace HM.Blazor.Pages
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Layouts;

#line default
#line hidden
#line 4 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 5 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using HM.Blazor;

#line default
#line hidden
#line 7 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\_Imports.razor"
using HM.Blazor.Shared;

#line default
#line hidden
#line 2 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System;

#line default
#line hidden
#line 3 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.Linq;

#line default
#line hidden
#line 5 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.Text;

#line default
#line hidden
#line 6 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.IO;

#line default
#line hidden
#line 7 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using HangmanLogic.Logic;

#line default
#line hidden
#line 8 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using HM.Data.Entities.GameItems;

#line default
#line hidden
#line 9 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using HM.Data.Entities.Difficulty;

#line default
#line hidden
#line 10 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using HM.Data.Entities.GameCondition;

#line default
#line hidden
#line 11 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using HM.Data.Abstraction;

#line default
#line hidden
#line 12 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/game")]
    public class Game : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.AddMarkupContent(0, "<h1>Welcome to the Hangman Game</h1>\r\n\r\n");
#line 16 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
  
    if (gameInProgress)
    {
        foreach (var letter in printWordDisplay.Name)
        {

#line default
#line hidden
            builder.AddContent(1, "            ");
            builder.OpenElement(2, "span");
            builder.AddContent(3, 
#line 21 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                   letter

#line default
#line hidden
            );
            builder.CloseElement();
            builder.AddMarkupContent(4, "\r\n");
#line 22 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
        }


#line default
#line hidden
            builder.AddContent(5, "        ");
            builder.OpenElement(6, "p");
            builder.AddContent(7, "Words guessed:");
            builder.AddContent(8, 
#line 24 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                          wordCount

#line default
#line hidden
            );
            builder.CloseElement();
            builder.AddMarkupContent(9, "\r\n        ");
            builder.OpenElement(10, "p");
            builder.AddContent(11, "Number of tries:");
            builder.AddContent(12, 
#line 25 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                            tries

#line default
#line hidden
            );
            builder.CloseElement();
            builder.AddMarkupContent(13, "\r\n        ");
            builder.OpenElement(14, "p");
            builder.AddContent(15, "Jokers available:");
            builder.AddContent(16, 
#line 26 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                             jokers

#line default
#line hidden
            );
            builder.CloseElement();
            builder.AddMarkupContent(17, "\r\n        ");
            builder.OpenElement(18, "p");
            builder.AddContent(19, "Input:");
            builder.AddContent(20, 
#line 27 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                  inputDisplayFirstLetter

#line default
#line hidden
            );
            builder.CloseElement();
            builder.AddMarkupContent(21, "\r\n        ");
            builder.OpenElement(22, "input");
            builder.AddAttribute(23, "name", "MainCharInput");
            builder.AddAttribute(24, "type", "text");
            builder.AddAttribute(25, "value", Microsoft.AspNetCore.Components.BindMethods.GetValue(
#line 28 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                                            inputDisplay

#line default
#line hidden
            ));
            builder.AddAttribute(26, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => inputDisplay = __value, inputDisplay));
            builder.CloseElement();
            builder.AddMarkupContent(27, "\r\n        ");
            builder.OpenElement(28, "button");
            builder.AddAttribute(29, "class", "btn btn-primary");
            builder.AddAttribute(30, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, 
#line 29 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                                                   GuessLetter

#line default
#line hidden
            ));
            builder.AddContent(31, "Guess");
            builder.CloseElement();
            builder.AddMarkupContent(32, "\r\n");
#line 30 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
    }
    else if (!gameInProgress && gameWon)
    {

#line default
#line hidden
            builder.AddContent(33, "        ");
            builder.AddMarkupContent(34, "<p>You won!</p>\r\n");
            builder.AddContent(35, "        ");
            builder.OpenElement(36, "button");
            builder.AddAttribute(37, "name", "startBtn");
            builder.AddAttribute(38, "class", "btn btn-primary");
            builder.AddAttribute(39, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, 
#line 35 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                                                                   StartGame

#line default
#line hidden
            ));
            builder.AddContent(40, "New Game");
            builder.CloseElement();
            builder.AddMarkupContent(41, "\r\n");
#line 36 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
    }

    else if (!gameInProgress && gameLost)
    {

#line default
#line hidden
            builder.AddContent(42, "        ");
            builder.AddMarkupContent(43, "<p>You lost!</p>\r\n");
            builder.AddContent(44, "        ");
            builder.OpenElement(45, "button");
            builder.AddAttribute(46, "name", "startBtn");
            builder.AddAttribute(47, "class", "btn btn-primary");
            builder.AddAttribute(48, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, 
#line 42 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                                                                   StartGame

#line default
#line hidden
            ));
            builder.AddContent(49, "New Game");
            builder.CloseElement();
            builder.AddMarkupContent(50, "\r\n");
#line 43 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
    }
    else
    {

#line default
#line hidden
            builder.AddContent(51, "        ");
            builder.OpenElement(52, "button");
            builder.AddAttribute(53, "name", "startBtn");
            builder.AddAttribute(54, "class", "btn btn-primary");
            builder.AddAttribute(55, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, 
#line 46 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
                                                                   StartGame

#line default
#line hidden
            ));
            builder.AddContent(56, "New Game");
            builder.CloseElement();
            builder.AddMarkupContent(57, "\r\n");
#line 47 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
    }

#line default
#line hidden
        }
        #pragma warning restore 1998
#line 49 "C:\Users\Nookie\source\repos\Hangman\HM.Blazor\Pages\Game.razor"
       
    Word printWordDisplay;

    Word chosenWordDisplay;

    string inputDisplay;

    char inputDisplayFirstLetter;

    bool gameInProgress = false;

    bool gameFinished = true;

    bool gameWon = false;

    bool gameLost = false;

    int wordCount = 0;

    int tries = 0;

    int attempts = 0;

    int jokers = 1;

    private const int MAX_FAILS = 9;

    GameData gameData = new GameData();

    void StartGame()
    {
        List<Word> words = new List<Word>
    {
                new Word("apple"),
                new Word("stuff"),
                new Word("elephant"),
                new Word("archipelago"),
                new Word("imagination")
            };

        string category = "Animals";
        IGameData gameData = new GameData(category, words, GameDifficulty.Hard);
        gameData.CheckWordsForErrors();

        Word chosenWord = gameData.GetRandomWord();
        Word printWord = new Word();
        printWord.Name = chosenWord.Name;

        printWord.Name = new Regex("\\S").Replace(chosenWord.Name, "_ ");
        printWordDisplay = printWord;
        chosenWordDisplay = chosenWord;
        StartGameFlag(); // Sets up that the game has just started


        /*
        if (inputDisplayFirstLetter == '!')
        {
            if (gameData.GetJokerCount() > 0)
                inputDisplayFirstLetter = GameLogic.GetJoker(gameData, chosenWord, printWord);
            else
                continue;
        }
        */

        /*
        if (gameData.GuessCharacterInWord(input, chosenWord) && !printWord.Name.Contains(input))
        {
            if (gameData.Win(chosenWord))
            {
                GameLogic.GameOver(chosenWord, gameData, GameCondition.Won);
                break;
            }
            else
            {
                for (int i = 0; i < chosenWord.Name.Length; i++)
                {
                    if (chosenWord.Name[i] == input)
                    {
                        StringBuilder sb = new StringBuilder(printWord.Name);
                        sb[i] = input;
                        printWord.Name = sb.ToString();
                    }
                }
                continue;
            }
        }
        else if (!gameData.GuessCharacterInWord(input, chosenWord))
        {
            if (gameData.Fail())
            {
                GameLogic.GameOver(chosenWord, gameData, GameCondition.Lost);
                break;
            }
            else
            {
                continue;
            }
        }
        */
    }

    void StartGameFlag()
    {
        gameInProgress = true;
    }

    void GetInput()
    {
        if (string.IsNullOrWhiteSpace(inputDisplay))
            return;

        inputDisplayFirstLetter = inputDisplay[0];
    }

    void GuessLetter()
    {
        GetInput();
        bool isGuessed = false;
        for (int i = 0; i < chosenWordDisplay.Name.Length; i++)
        {
            if (inputDisplayFirstLetter == chosenWordDisplay.Name[i])
            {
                StringBuilder sb = new StringBuilder(printWordDisplay.Name);
                sb[i] = inputDisplayFirstLetter;
                printWordDisplay.Name = sb.ToString();

                isGuessed = true;
                wordCount++;
            }
        }

        if (!isGuessed)
        {
            tries++;
        }

        if (wordCount == chosenWordDisplay.Name.Length)
        {
            EndGame(GameCondition.Won);
        }

        if (tries == MAX_FAILS)
        {
            EndGame(GameCondition.Lost);
        }
    }

    void EndGame(GameCondition gameCondition)
    {
        gameInProgress = false;
        gameFinished = true;

        if (gameCondition == GameCondition.Won)
        {
            gameWon = true;
            gameLost = false;
        }
        else
        {
            gameLost = true;
            gameWon = false;
        }

        CleanUp();
    }

    void CleanUp()
    {
        chosenWordDisplay = null;
        printWordDisplay = null;
        wordCount = 0;
        tries = 0;
    }


#line default
#line hidden
    }
}
#pragma warning restore 1591
